Комментарии
<style>
  .news
  {
    color: #553333 /*jgnbjgnjgnb*/
  } // Hello
</style>
<!--jnjfnvjfvnjfvn-->

<p style="font-size: 25px;">tetx</p> 
font-size - изменяем размер текста

1. Как добавить стили в файл HTML
Указать стили в качестве значения атрибута style. 
Такую запись называют «инлайн» (inline), 
что означает запись правила в одну строку 
с использованием атрибута style.

2. Использовать специальный тег <style>, который указывают в секции head. 
Браузер обработает всё, что написано внутри этого тега как CSS код

3. Подключать отдельный файл со стилями. 
В этом случае создаётся файл с расширением .css, в котором записываются CSS правила. 
Для подключения файла используется мета-тег <link>

style="border: 2px solid #000;"

Ускорение работы
<style>
  div {
    font-size: 20px;
  }
  p {
    font-size: 10px;
  }
</style>

Классы
<p class="paragraph"></p>
<style>
.paragraph 
{
  color: #333333;
}
</style>

font: 18px/1.5 sans-serif; - назначение фонта
font-weight: bold; - изменение текста на жирный

ID
<p id="red">Красный параграф</p>
<style>
#red {
  color: red;
}
</style>

Коскадность
<p class="text-bold text-dark">text</p> - два класса(text-bold, text-dark)

padding: 15px - отступ со всех сторон

Приоритет селекторов
1. Селектор по идентификатору (#blue)
2. Селектор по классу (.red)
3. Селектор по тегу (p)

Слияние классов(Точный выбор)
<p class="paragraph color-primary">Параграф</p>
.paragraph.color-primary {
  color: blue;
}

Приоритет селекторов через вес
Селектор по тегу: 1
Селектор по классу: 10
Селектор по ID: 100
Стиль в атрибуте тега: 1000

border-style: none - отмена границы

Задание цвета текста на всей странице
<style>
body {
  color: #333333;
}
</style>

Выравнивание текста
text-align: (left, right, justify, center)
left — по левому краю. Используется по умолчанию
center — по центру
right — по правому краю
justify — по ширине

font-size:
Меняет размер текста

font-weight:
Меняет тип текста
1.bold — насыщенный шрифт. Внешне текст будет выглядеть так же, как и при использовании тега <strong> или <b>
2.normal — значение по умолчанию. Полезное значение, если весь текст имеет нестандартную насыщенность, 
но какой-то участок необходимо сделать стандартным по насыщенности
Таблица:
100
200
300
400 — соответствует значению normal
500
600
700 — соответствует значению bold
800
900

font-style:
normal — обычный вывод текста.
italic — курсивное начертание
oblique — косое начертание

font-variant:
Капитель — вид строчных букв, размер которых совпадает (или приближен) к размеру заглавных букв.
normal — нормальное написание текста
small-caps — капитель

text-decoration:
underline — Подчёркивание текста
line-through — Перечёркивание текста
overline — Надчёркивание текста

line-height: (число)
Изменение межстрочного интервала

font-family: (название шрифта)
назначает несколько или один шрифт
Стандартніе слова-типы: (Они всегда пишутся последними)
1. serif — шрифты с засечками (антиквы). Ярким представителем таких шрифтов является Times New Roman
2. sans-serif — шрифты без засечек (гротеск). Наиболее знакомыми такими шрифтами являются Arial и Verdana
3. cursive — курсивные шрифты
4. fantasy — декоративные шрифты. Это семейство используется реже всего. 
Дело в том, что декоративные шрифты слишком разные, чтобы они были взаимозаменяемые
5. monospace — моноширинные шрифты. 
К ним относятся шрифты, в которых все символы имеют одинаковую ширину. 
Очень часто их используют программисты в текстовых редакторах

Font: (Только такая последовательность)
1. font-style
2. font-variant
3. font-weight
4. font-size / line-height (эти два правила записываются через слэш)
5. font-family

Border:
border-width — ширина границы
border-style — стиль границы
border-color — цвет границы

Стили границы:
dotted(пунктирная)
dashed(штриховая)
solid(сплошная)
double
groove
ridge
inset
outset

background-color:
Изменение фона

Padding:(для текста)
padding-top — внутренний отступ сверху
padding-right — внутренний отступ справа
padding-bottom — внутренний отступ снизу
padding-left — внутренний отступ слева
1. Если указать только одно значение, то оно будет использовано одновременно для всех сторон
2. Если указать два значения, то первое будет использоваться для отступов по вертикали (сверху и снизу), 
а второе по горизонтали (справа и слева)
3. Если указать три значения, то они будут использоваться для отступа сверху, по горизонтали и снизу

width:(пиксели)
Ширина

height:(пиксели)
Высота

Margin: (для тега или фона или формы)
margin-top — внешний отступ сверху
margin-right — внешний отступ справа
margin-bottom — внешний отступ снизу
margin-left — внешний отступ слева
1. Если указать только одно значение, то оно будет использовано одновременно для всех сторон
2. Если указать два значения, то первое будет использоваться для отступов по вертикали (сверху и снизу), 
а второе по горизонтали (справа и слева)
3. Если указать три значения, то они будут использоваться для отступа сверху, по горизонтали и снизу

Понимание adding border margin content
padding — внутренние отступы
border — границы
margin — внешние границы
content - то что будет внутри

box-sizing-?
1. content-box — значение по умолчанию. Работает так, как было описано в уроке
2. border-box — значения границы и внутренних отступов не увеличивают элемент, 
а «съедают» место у контента, то есть свойства не будут влиять и высоту и ширину. 
Если установлено фиксированное значение, то оно таким и останется, 
но для контента внутри останется меньше места

Размер шрифта:
.news {
  font-size: 20px;
}
.news h2 {
  font-size: 200%;
} => (20px * 2 = 40px) 
Существует ещё несколько основных относительных единиц измерения:
1. em - определяется относительно размера шрифта у родительского элемента, т.е. 
1.5em будет на 50% больше базового вычисленного размера шрифта родителя. 
Очень похоже на использование процентов, только указывается немного по другому.
2. rem - определяется относительно размера шрифта у корневого элемента, т.е. у тега html (значение по-умолчанию 16px).
Полезное
С помощью относительных единиц можно управлять не только размером шрифта, 
но и остальными свойствами, которые в качестве значения принимают число и единицу измерения.

RGB:
.text {
  color: rgb(255, 0, 255);
}
.text {
  color: rgba(255, 0, 255, 0.5);
}

Media: - ?
@media (условие) {
  /* Правила */
}
1. Ширина или высота viewport
2. Горизонтальная или вертикальная ориентация экрана
3. Тип устройства
Примеры:
1. max-width: max-height:
2. portrait — портретная ориентация устройства. Высота экрана больше, чем его ширина
3. landscape — альбомная ориентация устройства. Высота экрана меньше, чем его ширина

Анимация:
@keyframes color-change {
  0% {
    color: blue;
  }
  50% {
    color: red;
  }
  100% {
    color: blue;
  }
}
1. Название анимации
2. Длительность анимации. Указывается в секундах (1s, 2s, 3s и так далее)
3. Бесконечная анимация или нет (если бесконечная, то указывается параметр infinite)
.animation-text {
  animation: color-change 3s infinite;
}

Переменная:
--имя-переменной: значение
Если :root - тогда она глобальная!
Как приминяются переменные:
.left-sidebar {
  background-color: var(--main-color);
}(var)

Position: -?
1. relative (относительное позиционирование). 
Позволяет изменить расположение элемента относительно того места, 
где он был расположен до применения свойства. 
При этом, то место на странице, которое блок занимал ранее, останется. 
То есть другие блоки не будут вставать на место, 
где блок располагался до применения правила position.
2. absolute (абсолютное позиционирование). 
«Вынимает» блок из HTML вёрстки и изменяет его расположение относительно левого верхнего угла страницы 
(или родительского элемента, если у него есть свойство position в значении fixed, absolute, relative, или sticky).
 В отличии от relative, место, где располагался absolute блок, будет удалено, и другие блоки смогут занять это место.
3. fixed. Также, как и absolute, 
данное правило извлечёт блок из HTML вёрстки и расположит его в левом верхнем углу. 
Отличием от абсолютного позиционирования является то, 
что блок будет «следовать за страницей» и всегда находится в зоне видимости пользователя. 
Это удобно для создания меню, которые должны следовать за пользователем.
top, right, left и bottom - что пользуются!!!


Дополнительно:
em.date {
  color: blue;
} em - тэг
rem=16px
em=16px
header, footer { ... } - чтобы преминялся и в header и footer

margin, padding, border(size) 12px auto - автоматическое изменение размера

Дополнительно
direction— это свойство CSS, которое может быть ltr(слева направо) или rtl(справа налево):
если ltrвыбрано, startравноleft
если rtlвыбрано, startравноright

text-decoration
Свойство text-decorationиспользуется для добавления строки в ваш текст.
Значение по умолчанию:none
Возможные значения:
overline
underline
line-through

text-indent
Свойство text-indentпозволяет добавлять пробел перед первой буквой первой строки блочного элемента.
Значение по умолчанию: 0(ноль)

text-shadow
h1{ text-shadow: 0 2px 5px rgba(0,0,0,0.5);}

Цветовые градиенты
CSS также позволяет определять цветовые градиенты в качестве фоновых изображений в двух разных формах:
linear-gradientдля градиентов в одном направлении, в прямоугольной форме
radial-gradientдля градиентов во всех направлениях, в круглой форме

display
Свойство displayпозволяет изменить тип элемента HTML. По умолчанию абзац <p>( элемент уровня блока ) 
будет иметь displayзначение по умолчанию block, но может отображаться как встроенный.
Атрибуты
1. block - займет всю доступную ширину
2. inline - будет действовать как обычный текст
3. inline-blockкак - следует из названия, представляет собой смесь блочного и встроенного поведения, вариант «лучшее из обоих миров».
4. list-item - похоже на blockто, что он занимает всю доступную ширину, но показывает дополнительную точку маркера
5. table, table-row и table-cell - все они имеют очень специфическое, хотя и неожиданное поведение, 
позволяющее создавать более интересные макеты.
----------------
Поскольку рендеринг этих маркеров и чисел различается в разных браузерах, а также их сложно стилизовать в CSS, 
это display: list-itemправило никогда не используется. 
На самом деле, <li>s обычно визуализируются как display: blockили display: inline, так как они более гибкие для стиля.

overflow
Атрибуты
1. visible
2. hidden
3. scroll
4. auto

Block
Все blockэлементы текучие . Они естественным образом адаптируют свой макет к своему внутреннему содержанию:
Width: 100%
блок будет занимать всю доступную ширину
Word: wrap
перенос слов, если встроенное содержимое блока не помещается на одной строке, оно будет продолжено на новой строке
Height: auto
автоматически высота блока изменяется автоматически, чтобы соответствовать размеру его содержимого.

Несколько свойств CSS позволяют нарушить поток:
height - и может изменить текучесть width элемента
float - нарушает поведение элемента, а также его окружение
position - absoluteи fixed удалить элемент из потока
z-index - может изменить порядок расположения элементов

