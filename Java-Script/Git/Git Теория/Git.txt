--local 	конфигурация локальная [папка]/.git/config
--global 	конфигурация глобальная Users/[USER]/.gitconfig
--system 	конфигурация системная Program Files/Git/etc/gitconfig

HEAD и @ это одно и тоже

git help [Command] - помощь по команде [Command]

git init 					- инициализация папки репозитория
git config user.name "NAME" 			- установить имя пользователя
git config user.email "EMAIL"			- установить e-mail
git config alias.[имя алиаса] 'COMMAND'		- добавление алиаса
git config core.editor "[путь к редактору]"	- установить редактор для commit (""C:\\Windows\\System32\\notepad.exe")

git status					- статус файлов репозитория
git add						- добавление файла в [папка].git/ для последующего коммита
git add	-p [File]				- Возможность принятия решения, какие части измнений внутри файла добавлять в индкес (прим: s разбивает на более мелкие части)
git add .					- добавление всех файлов в текущей папки для последующего коммита
git add -A					- добавление всех файлов и папок для последующего коммита
git rm [File]					- удалить файл из репозитория + физически на диске
git rm -r [Folder]				- удалить все файлы из папки репозитория + физически на диске
git rm --cashed [File]				- удалить файл из репозитория, но не трогать физически на диске
git rm -f					- Forced, принудительное выполнение действия. Если в файле были сделаны изменения, но его все равно нужно удалить
git mv [FileFrom] [FileTo]			- Переименование файла репозитория без коммита с добавлением в индекс
git commit					- применение измнений в репозиторий
git commit -m "Commit information"		- применение измнений в репозиторий без вызова редактора
git commit -am "Commit information"		- переносит все изменения в индекс и коммитит
git commit -m "Commit information" [Path]	- переносит в индекс и коммитит файл/папку в указанном путе Path 
git commit -c[C] ORIG_HEAD			- параметр сохраняет комментарий коммита ORIG_HEAD с возможностью редактровать или без С
git commit --amend 				- git reset "@~" и git commit -c ORIG_HEAD одновременно
git commit --amend --no-edit			- git reset "@~" и git commit -C ORIG_HEAD одновременно
git commit --amend --reset-author		- параметр обновляет автора коммита

git commit --author="Andrei Haleta <agoletaau@gmail.com>" --date="..." - применение измнений в репозиторий c изменением автора

.gitignore - Файл в корне папки репозитория, который содержит весь список игнорируемых файлов и папок

git show 			- показать последний коммит
git show [Name] 		- показать последний коммит в ветке [Name]
git show e704 			- показать информацию о коммите, ID которого начинается с e704 (не менее 4 первых)
git show --pretty=fuller	- показать более детальную информацию
git show [Name]~X		- показать коммит сделанный X назад в ветке [Name]
git show [Name]~X:[File]	- показать только содержание файла [File] X назад в ветке [Name]
git show :/[Text]		- найти коммит содержащий [Text] в описании

git branch			- получить текущую ветку
git branch -v 			- получить текущую ветку с ID
git branch [Name]		- создает новую ветку с именем [Name]
git branch -f [Name] 54ef	- перемещает ветку [Name] на коммит 54ef !!! При условии, что текущая ветка не [Name]
git branch -d [Name]		- удалить ветку [Name] только если ветка объединена с другой
git branch -D [Name]		- удалить ветку [Name] и сделать коммиты по этой ветке недостижимыми, которые через некоторое время будут физически удалены Git

git checkout [Name]		- переключиться на ветку
git checkout [Name] [File]	- достать файл(ы) или папку [File] из ветки или ID (например 54ef) коммита в текущую ветку
git checkout -B [From] [To] 	- переключает указатель ветки [From] на [To] или создает [To], комбинация "git branch -f" и "git checkout"
git checkout -f [Name or File]	- вернуть ветку или файл из коммита (откатить изменения), кроме файлов, которые Git не отслеживаются

git reset --hard		- аналогична команде сверху
git reset --hard 54ef		- отменяет текущие изменения и остальные коммиты до 54ef. Этой же командой можно и вернуться назад или с помощью ORIG_HEAD
git reset --hard "@~X"		- отменяет текущие изменения на Х коммитов назад
git reset --soft		- оставляет сделанные изменения, переходит на предыдущий в состояние до коммита (проиндексированы)
git reset --mixed		- оставляет сделанные изменения, но индекс сбрасывает
git reset			- тоже, что и --mixed
git reset [File]		- сбросить файл из индекса в текущей ветке
git reset HEAD [Folder]		- указание не отслеживать изменения в папке или файле [Folder]
git clean -dxf			- удалить неотслеживаемые файлы; d это неотслеживаемые; x это Git игноры; f это обязательный флаг (force)

git stash 			- сохранение копии изменений НЕЗАВИСИМО ОТ ветки, которые мы не закоммитили, но после переключения ветки потеряем
git stash pop			- возврат копии изменений в текщую ветку (обратная операция git stash)

git log				- история коммитов
git log	[Name] 			- история коммитов ветки [Name]
git log	--oneline		- история коммитов с параметром "одной строкой" (ужатый вид)

git merge [Name]		- слияние текущей ветки с веткой [Name] методом fast-forward -> перенос указателя ветки, предварительно записав ID слияемого коммита в файл ORIG_HEAD
git branch -f [Name] ORIG_HEAD	- отмена слияния предыдущей командой

git reflog [Name]		- вывод лога действий над веткой [Name]. Если [Name] не указывать, то текущей ветки.
git reflog --data='Format'	- параметр вывод лога с датой в формате Format например "iso"
git reflog --no-decorate	- параметр вывода лога без декора

git log					- вывод истории коммитов
git log -p				- история коммитов с изменениями внутри файлов
git log [Name]				- вывод истории коммитов ветки [Name]
git log [Names] 			- вывод истории коммитов веток [Names] через пробел (можно --all тогда все ветки) 
git log [Name]..[Branch] --boundary	- вывод коммитов b=[Branch] с момента разделения с [Name]; --boundary для включения коммита разделения	
git log [Name]...[Branch] --boundary	- вывод коммитов b=[Branch] и [Name] с момента разделения; --boundary для включения коммита разделения	
git log [File]				- вывод всех коммитов где менялся файл [File]
git log -p [File]			- вывод всех коммитов где менялся файл [File] и изменения внутри файла
git log -p --follow [File]		- если файл переименовывался, то будет вся цепочка
git log --graph 			- параметр, который выводит структуру связей веток
git log --pretty=online			- в одну строку
git log --abbrev-commit			- сохратить длину символов в ID ссылке
git log --online			- два предыдущих в одном
git log --date=short			- тогда например 2022-05-22
git log --date=format:"%F %R"		- где %F это дата %R это время, полный перечень см. strftime в google

git log --pretty=format:"%h %cd | %C(dim green)%s%d (%cn)" --date=format:"%F %R" - форматированный вывод (полный список в git help log)
		%h 		- сокращенный ID
		%cd 		- дата коммитера
		%s 		- комментарий коммита
		%d 		- декорирование (какие ссылки на него указывают)
		%cn 		- имя кто закоммитил
		%C(color)	- цвет остальной строки; "dim green" это приглушенный зеленый; цвета см. git help config

git log --grep -i					- отключает чуствительность к регистру в grep
git log --grep [Subtext] [Name]				- ищет все коммиты где [Subtext] присутствует в описании коммита ветки [Name]
git log --grep [Subtext1] grep [Subtext2]		- ищет все коммиты где [Subtext1] ИЛИ [Subtext2]
git log --grep [Subtext1] grep [Subtext2] --all-match	- ищет все коммиты где [Subtext1] И [Subtext2]
git log --grep -G[Subtext]				- ищет все коммиты где [Subtext] был в изменениях
git log --grep -G[Subtext] -p				- тоже, но показать еще и изменения внутри
git log --grep -G"function Say\(" -p 			- пример для -G поиска функции; '\(' это экран для ( 
git log --grep -L "/Subtext1/","/Subtext2/":[Name]	- ищет все коммиты с изменениям в блоке с "/Subtext1/" до "/Subtext2/" в файле [Name]
	Например: git log --grep -L "/<head>/","/<\/head>/":index.html где \/ это экран

git log --grep --author=[Name]		- поиск по автору
git log --grep --committer=[Name]	- поиск по коммиттеру
git log --grep --after [Date]		- поиск по дате после; пример [Date] это '2022-05-22'
git log --grep --before [Date]		- поиск по дате до


	Джорд Фридл "Регулярные выражения" стандарты для поиска в тексте например
git config --global grep.patternType perl 	- установить стандарт регулярных выражений perl
git log --grep "Say(Hello|Bye)" 		- ищет все коммиты где в описании есть Say, затем Hello или Bye
 
git blame [Name] 				- построчная информация об авторе кода последнего коммита
git blame [Name] --date=format:"%F %R" 		- построчная информация об авторе кода последнего коммита с красивой датой :-)
git blame [Name] -L 10,20" 			- построчная информация об авторе кода последнего коммита в диапазоне строк 

git config --global pretty.[Name] [Save] 	- сохранить формат для pretty под именем [Name], например [Save] это format:"%h %cd | %C(dim green)%s%d (%cn)" --date=format:"%F %R"
git config --global format.pretty [Name] 	- установить формат [Name] по умолчанию для git log
get config --global log.date format:"%F %R"	- установить формат даты по умолчанию для git log

git diff [What] [With]		- сравнение веток для текущих версий
git diff [What]...[With]	- сравнение текущей версии ветки [With] с версией [What] с момента расхождения
git diff			- сравнение рабочего каталога с индексом
git diff HEAD			- сравнение рабочего каталога с коммитом !!! Для новых файлов необходимо поместить в индекс
git diff --cached		- сравнение проидексированных файлов и коммита
git diff [File or Folder]	- сравнение конкретного файла или директория ("." означает корень) указывается в конце
git diff -- [File or Folder]	- сравнение конкретного файла или директория в случае конфликта имен
git diff --name-only		- параметр, который будет отображать только имена различающихся файлов без деталей внутри
git diff [С1]:[F1] [С2]:[F2]	- Сравнивает файл [F1] коммита [C1] с файлом [F2] коммита [C2]

git merge-base [Name1] [Name2]	- покажет ID разделения веток [Name1] [Name2]