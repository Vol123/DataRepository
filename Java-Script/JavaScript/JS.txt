console.log() - вывести текст на экран
console.log(`${greeting}, ${firstName}!`); - интерполяция(greeting, firstName - переменные). ` - нужный символ

Комменты
// - однострочный
/*...*/ - блочный

Операции
* — умножение
/ — деление
- — вычитание
% — остаток от деления
** — возведение в степень

Infinity - бесконечность
NaN - число, но очень большое!!!

String
String.fromCharCode(63) - перевот из двоичного кода в символ
let имя-переменная - создание переменной
kebab-case — составные части переменной разделяются дефисом. Например: my-super-var.
snake_case — для разделения используется подчеркивание. Например: my_super_var.
CamelCase — каждое слово в переменной пишется с заглавной буквы. Например: MySuperVar.
lowerCamelCase — каждое слово в переменной пишется с заглавной буквы, кроме первого. Например: mySuperVar.
slice - получение части строки(от какого, до какого)
trim - оставляет только чистые буквы в тексте(и сзади, и впереди)
reverse - меняет строку с задом наперед (мама => амам)
startWidth(line, position) - проверяет если эта строчка в тексте(Saturday) - sat с 0 позиции есть в строке
repeat(line, count) - повторение строки несколько раз

NaN
1. Возможные (допустимые) значения. Например, числа в JavaScript делятся на два типа: 
Number и BigInt. Первые — это все числа ниже определенного порога (его можно посмотреть), 
вторые — выше. Такое разделение связано с техническими особенностями работы аппаратуры.
2. Набор операций, которые можно выполнять над этим типом. 
Например, операция умножения имеет смысл для типа «целые числа». 
Но не имеет смысла для типа «строки»: умножать слово «мама» на слово «блокнот» — бессмыслица.

typeof имя-переменная - переменная, которая хранит тип значения или  переменной
const user = { name: 'Toto', age: 33 }; - агрегатные типы

Литералы
ссылка: https://ru.wikipedia.org/wiki/%D0%9B%D0%B8%D1%82%D0%B5%D1%80%D0%B0%D0%BB_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)

ВАЖНО!
let s = '1';
let d = 12;
console.log(s * d) - * нету у типа строки, поэтому JS  сам понимает, что строку нужно переводить в число!

import { length } from 'hexlet-basics/string'; - подключение функции и библиотеки
import { pow } from 'hexlet-basics/math';

Math
Math.ceil - положительное дробное число увеличивает на 1, отрицательно дробное число - убирает дробь, 
а целые числа оставляет как есть.
Math.random - рандомное число от 0 до 1
Math.pow - степень
Math.max - из всех чисел самое максимальное
Math.max - из всех чисел самое минимальное
Math.round
// Вернёт значение 20
x = Math.round(20.49);
// Вернёт значение 21
x = Math.round(20.5);
// Вернёт значение -20
x = Math.round(-20.5);
// Вернёт значение -21
x = Math.round(-20.51);

TypeOf
typeof значение или переменная - получение типа

Number
toString - преобразование в строку

Функция
1. function Название(){}
2. const Название = () => {}
3. () => {}; - работающий блок, который работает внутри(как вложенная функция)

Лямбда-выражения 
=> a + b; (return a + b;)

Операции
< меньше
<= меньше или равно
> больше
>= больше или равно
=== равно
!== не равно
Но есть и == != - но они опасны для использования!!!

boolean
true
false

Предикаты - нужныы для лучшего понимания кода
is
has
can

Правила по которым происходят преобразования
1. 0, '', undefined, NaN, null приводятся к false. Эти значения называют falsy.
2. Всё остальное приводится к true

Но здесь есть потенциальный баг. Если name содержит falsy-значение, 
а присваивание константе value значений типа 0, undefined, NaN или null допустимо, 
то код выше начнет работать неверно:

Тернарный оператор
Общий паттерн выглядит так: <predicate> ? <expression on true> : <expression on false>.

Switch
switch (status) {
  case 'processing': // status === processing
    // Делаем раз
    break;
  case 'paid': // status === paid
    // Делаем два
    break;
  case 'new': // status === new
    // Делаем три
    break;
  default: // else
    // Делаем четыре
}